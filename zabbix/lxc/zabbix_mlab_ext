#!/usr/bin/python

import sys
import re
import pprint
import time
import os
import multiprocessing
from xml.etree import ElementTree

def getLibVirtConnection():
    import libvirt
    conn = libvirt.openReadOnly("lxc:///")
    if conn == None:
        print 'Failed to open connection to the hypervisor'
        sys.exit(1)
    return conn

def key_libvirt_version(arg):
    return getLibVirtConnection().getVersion()

def key_vm_discovery(arg):
    conn = getLibVirtConnection()
    list = conn.listDefinedDomains()
    for did in conn.listDomainsID():
        list.append(conn.lookupByID(did).name())


    return pprint.pformat({'data': [{"{#VMNAME}" : t} for t in list]}).replace("'", '"')

def getDomain(domainName):
    try:
        return getLibVirtConnection().lookupByName(domainName)
    except:
        print 'Failed to find the domain: ' + str(domainName)
        sys.exit(1)

def key_vm_status(arg):
    import libvirt
    stateNames = { libvirt.VIR_DOMAIN_RUNNING  : "running",
                   libvirt.VIR_DOMAIN_BLOCKED  : "idle",
                   libvirt.VIR_DOMAIN_PAUSED   : "paused",
                   libvirt.VIR_DOMAIN_SHUTDOWN : "in shutdown",
                   libvirt.VIR_DOMAIN_SHUTOFF  : "shut off",
                   libvirt.VIR_DOMAIN_CRASHED  : "crashed",
                   libvirt.VIR_DOMAIN_NOSTATE  : "no state" }
    dom = getDomain(arg)
    state = dom.state(0)
    return stateNames[state[0]]

def key_libvirt_vm_cputime(arg):
    dom = getDomain(arg)
    cputime = dom.info()[4]
    return float(cputime) / 1000000000

def key_libvirt_vm_memory(arg):
    dom = getDomain(arg)
    memory = dom.info()[2]
    return long(memory) * 1024

def key_libvirt_vm_memory_max(arg):
    dom = getDomain(arg)
    memory_max = dom.info()[1]
    return long(memory_max) * 1024

def key_libvirt_vm_memory_percent(arg):
    dom = getDomain(arg)
    memory_max = dom.info()[1]
    memory = dom.info()[2]
    return float(memory) / memory_max;

def libvirt_get_pid(arg):
    conn = getLibVirtConnection()
    for did in conn.listDomainsID():
        if arg == conn.lookupByID(did).name():
        	return did
    return 1

def get_target_devices(dom):
  tree=ElementTree.fromstring(dom.XMLDesc(0))

  devices=[]

  for target in tree.findall("devices/interface/target"):
      dev=target.get("dev")
  
      if not dev in devices:
          devices.append(dev)
      
  return devices

def key_vm_net_in(arg):
    dom = getDomain(arg)
    dev = get_target_devices(dom)[0]
    s = dom.interfaceStats(dev)
    return s[0]
    
def key_vm_net_out(arg):
    dom = getDomain(arg)
    dev = get_target_devices(dom)[0]
    s = dom.interfaceStats(dev)
    return s[4]

def getCGroupDir(arg, cgroup_subsys, subpath = ""):
    if arg is None:
        for line in open('/proc/%d/cgroup' % os.getpid()):
            if cgroup_subsys in line:
                return "/sys/fs/cgroup/%s/%s/" % (cgroup_subsys, line.split(":")[2].strip())
    return '/sys/fs/cgroup/%s/%s/libvirt/lxc/%s/' % (cgroup_subsys, subpath, arg)

def key_vm_cputime(arg):
    cgf = getCGroupDir(arg, 'cpuacct', "system/libvirtd.service") + 'cpuacct.usage';
    cputime = long(open(cgf, 'r').read())
    return float(cputime) / 1000000000

def key_vm_cputime_system(arg):
    cputime = key_vm_cputime(arg)
    cpunum = multiprocessing.cpu_count()

    return float(cputime) / cpunum 

def key_vm_memory(arg):
    cgf = getCGroupDir(arg, 'memory') + 'memory.usage_in_bytes';
    memory = long(open(cgf, 'r').read())
    return memory

def key_vm_memory_max(arg):
    cgf = getCGroupDir(arg, 'memory') + 'memory.limit_in_bytes';
    memory_max = long(open(cgf, 'r').read())
    return memory_max

def key_vm_memory_percent(arg):
    memory = key_vm_memory(arg)
    memory_max = key_vm_memory_max(arg)
    
    return float(memory) / memory_max;

def key_vm_disk_usage(arg):
    if arg is None:
        slice_name = open('/etc/slicename').read() 
        directory = "/"
    else:
        slice_name = arg
        directory = "/vservers/"
    id = 0
    for line in os.popen("btrfs subvolume list -a %s" % directory):
        line = line.strip()
        if line.endswith("/" + slice_name) or line.endswith(" " + slice_name):
            id = int(line.split(" ")[1])
            break
    usage = ""
    for line in os.popen("btrfs qgroup show %s" % directory):
        if line.startswith("0/%s" % id):
            usage = long(line.split(" ")[1]) 
    return usage

def key_vm_uptime(arg):
    if arg is None:
    	pid = 1
    else:
        pid = libvirt_get_pid(arg)
    (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat("/proc/%d/" % pid)
    return time.time() - ctime

def main(argv):

    command = None
    if len(argv) > 1:
        command = argv[1]
        
    if command == None or not re.match("^[a-zA-Z1-9_i\.]+$", command):
        print 'invalid data key: ' + str(command)
        sys.exit(1)

    argument = None
    if len(argv) > 2:
        argument = argv[2]
        if len(argument) == 0 or argument[0] == '_':
            argument = None
        if argument is not None and not re.match("^[\ a-zA-Z1-9_i\./]+$", argument):
            print 'invalid argument: ' + argument
            sys.exit(1)

    command = command.replace('.', '_')
    func = "key_%s" % command

    if not func in globals():
        print 'could not find function: ' + func
        sys.exit(1)

    result = globals()[func](argument)
    print result

if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        pass
